import {Calendar, CurrentDate} from '../components/13passPropsToAStatelessFunctionalComponent';


// The date prop should be generated by calling Date()

describe('Pass Props to a Stateless Functional Component', () => {


    const props = {
        date: Date()
}

    let wrapperCalendar;
    let wrapperCurrentDate;

    let wrapperCalendarMount;
    let wrapperCurrentDateMount;

    beforeEach(() => {
        wrapperCalendar = shallow(<Calendar />);
        wrapperCurrentDate = shallow(<CurrentDate />)

        wrapperCalendarMount = mount(<Calendar {...props} />);
        wrapperCurrentDateMount = mount(<CurrentDate {...props} />)

   });

    it('The Calendar component should return a single div element.', () => {  
        expect(wrapperCalendar.at(0).exists('div')).toBe(true) 
        expect(wrapperCalendar.length).toEqual(1)   
    });

    it('The second child of the Calendar Compoenent should be the CurrentDate component', ()=>{
        expect(wrapperCalendar.children().length).toEqual(2)   
        expect(wrapperCalendar.children(0).at(1).exists('CurrentDate')).toBe(true)
    })

      it('The CurrentDate component should have a prop called date.', () => {
        const propsTemp = wrapperCurrentDateMount.props()
        expect('date' in propsTemp).toBe(true)
      });


      it('The date prop of the CurrentDate should contain a string of text.', () => {
        const text = wrapperCurrentDateMount.prop('date')
        expect(typeof text).toEqual('string')
      });


    it('The CurrentDate component should render the value from the date prop in the p tag.', () => {
        const text = wrapperCurrentDateMount.find('p').text()
        const test = 'Current date:'+props.date; 
        expect(text).toEqual(test)
      });
});
